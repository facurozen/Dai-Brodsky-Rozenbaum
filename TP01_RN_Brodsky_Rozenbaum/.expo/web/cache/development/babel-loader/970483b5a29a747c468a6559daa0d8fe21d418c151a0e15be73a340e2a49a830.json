{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Perfil(_ref) {\n  var route = _ref.route;\n  var user = route.params.user;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isEditing = _useState2[0],\n    setIsEditing = _useState2[1];\n  var _useState3 = useState(_objectSpread({}, user)),\n    _useState4 = _slicedToArray(_useState3, 2),\n    editedUser = _useState4[0],\n    setEditedUser = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showPassword = _useState6[0],\n    setShowPassword = _useState6[1];\n  var handleEditClick = function handleEditClick() {\n    setIsEditing(true);\n  };\n  var handleSaveClick = function handleSaveClick() {\n    setIsEditing(false);\n  };\n  var handleInputChange = function handleInputChange(field, value) {\n    setEditedUser(_objectSpread(_objectSpread({}, editedUser), {}, _defineProperty({}, field, value)));\n  };\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      style: {\n        fontSize: 24\n      },\n      children: \"Perfil\"\n    }), isEditing ? _jsxs(View, {\n      children: [_jsx(TextInput, {\n        placeholder: \"Nombre\",\n        value: editedUser.Nombre,\n        onChangeText: function onChangeText(text) {\n          return handleInputChange('Nombre', text);\n        }\n      }), _jsx(TextInput, {\n        placeholder: \"Apellido\",\n        value: editedUser.Apellido,\n        onChangeText: function onChangeText(text) {\n          return handleInputChange('Apellido', text);\n        }\n      }), _jsx(TextInput, {\n        placeholder: \"Username\",\n        value: editedUser.Username,\n        onChangeText: function onChangeText(text) {\n          return handleInputChange('Username', text);\n        }\n      }), _jsx(TextInput, {\n        placeholder: \"Contrase\\xF1a\",\n        value: editedUser.Password,\n        onChangeText: function onChangeText(text) {\n          return handleInputChange('Password', text);\n        },\n        secureTextEntry: !showPassword\n      }), _jsx(Button, {\n        title: \"Guardar\",\n        onPress: handleSaveClick\n      })]\n    }) : _jsxs(View, {\n      children: [_jsxs(Text, {\n        children: [\"Nombre: \", user.Nombre]\n      }), _jsxs(Text, {\n        children: [\"Apellido: \", user.Apellido]\n      }), _jsxs(Text, {\n        children: [\"Username: \", user.Username]\n      }), _jsxs(Text, {\n        children: [\"Password: \", user.Password]\n      }), _jsx(TouchableOpacity, {\n        title: showPassword ? 'Mostrar Contraseña' : 'Ocultar Contraseña',\n        onPress: function onPress() {\n          return setShowPassword(!showPassword);\n        }\n      }), _jsx(Text, {\n        children: \"sadsa\"\n      }), _jsx(Button, {\n        title: \"Editar\",\n        onPress: handleEditClick\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","Perfil","route","user","params","isEditing","setIsEditing","editedUser","setEditedUser","showPassword","setShowPassword","handleEditClick","handleSaveClick","handleInputChange","field","value","fontSize","Nombre","text","Apellido","Username","Password"],"sources":["C:/Users/devandroid/Downloads/Dai-Brodsky-Rozenbaum-Jaichenco/TP01_RN_Brodsky_Rozenbaum/src/screens/Perfil.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, TextInput, Button, TouchableOpacity } from 'react-native';\r\n\r\nexport default function Perfil({ route }) {\r\n  const { user } = route.params;\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editedUser, setEditedUser] = useState({ ...user });\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const handleEditClick = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleSaveClick = () => {\r\n    // Aquí puedes agregar lógica para guardar los cambios en el perfil\r\n    // Por ejemplo, hacer una solicitud a tu API para actualizar el perfil\r\n    // y luego actualizar el estado o mostrar un mensaje de éxito.\r\n\r\n    // Después de guardar, puedes cambiar de nuevo a la visualización\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const handleInputChange = (field, value) => {\r\n    // Actualiza el objeto editedUser cuando se cambia un campo\r\n    setEditedUser({\r\n      ...editedUser,\r\n      [field]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <Text style={{ fontSize: 24 }}>Perfil</Text>\r\n      {isEditing ? (\r\n        // Modo de edición: muestra un formulario editable\r\n        <View>\r\n          <TextInput\r\n            placeholder=\"Nombre\"\r\n            value={editedUser.Nombre}\r\n            onChangeText={(text) => handleInputChange('Nombre', text)}\r\n          />\r\n          <TextInput\r\n            placeholder=\"Apellido\"\r\n            value={editedUser.Apellido}\r\n            onChangeText={(text) => handleInputChange('Apellido', text)}\r\n          />\r\n          <TextInput\r\n            placeholder=\"Username\"\r\n            value={editedUser.Username}\r\n            onChangeText={(text) => handleInputChange('Username', text)}\r\n          />\r\n          <TextInput\r\n            placeholder=\"Contraseña\"\r\n            value={editedUser.Password}\r\n            onChangeText={(text) => handleInputChange('Password', text)}\r\n            secureTextEntry={!showPassword} // Esto ocultará la contraseña si showPassword es false\r\n           />\r\n\r\n          <Button title=\"Guardar\" onPress={handleSaveClick} />\r\n        </View>\r\n      ) : (\r\n        // Modo de visualización: muestra los datos del usuario\r\n        <View>\r\n          <Text>Nombre: {user.Nombre}</Text>\r\n          <Text>Apellido: {user.Apellido}</Text>\r\n          <Text>Username: {user.Username}</Text>\r\n          <Text>Password: {user.Password}</Text>\r\n          <TouchableOpacity\r\n            title={showPassword ? 'Mostrar Contraseña' : 'Ocultar Contraseña'}\r\n            onPress={() => setShowPassword(!showPassword)} />\r\n            <Text>sadsa</Text>\r\n          <Button title=\"Editar\" onPress={handleEditClick} />\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGnD,eAAe,SAASC,MAAM,OAAY;EAAA,IAATC,KAAK,QAALA,KAAK;EACpC,IAAQC,IAAI,GAAKD,KAAK,CAACE,MAAM,CAArBD,IAAI;EACZ,gBAAkCJ,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA1CM,SAAS;IAAEC,YAAY;EAC9B,iBAAoCP,QAAQ,mBAAMI,IAAI,EAAG;IAAA;IAAlDI,UAAU;IAAEC,aAAa;EAChC,iBAAwCT,QAAQ,CAAC,KAAK,CAAC;IAAA;IAAhDU,YAAY;IAAEC,eAAe;EAEpC,IAAMC,eAAe,GAAG,SAAlBA,eAAe,GAAS;IAC5BL,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,IAAMM,eAAe,GAAG,SAAlBA,eAAe,GAAS;IAM5BN,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,IAAMO,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIC,KAAK,EAAEC,KAAK,EAAK;IAE1CP,aAAa,iCACRD,UAAU,2BACZO,KAAK,EAAGC,KAAK,GACd;EACJ,CAAC;EAED,OACE,MAAC,IAAI;IAAA,WACH,KAAC,IAAI;MAAC,KAAK,EAAE;QAAEC,QAAQ,EAAE;MAAG,CAAE;MAAA,UAAC;IAAM,EAAO,EAC3CX,SAAS,GAER,MAAC,IAAI;MAAA,WACH,KAAC,SAAS;QACR,WAAW,EAAC,QAAQ;QACpB,KAAK,EAAEE,UAAU,CAACU,MAAO;QACzB,YAAY,EAAE,sBAACC,IAAI;UAAA,OAAKL,iBAAiB,CAAC,QAAQ,EAAEK,IAAI,CAAC;QAAA;MAAC,EAC1D,EACF,KAAC,SAAS;QACR,WAAW,EAAC,UAAU;QACtB,KAAK,EAAEX,UAAU,CAACY,QAAS;QAC3B,YAAY,EAAE,sBAACD,IAAI;UAAA,OAAKL,iBAAiB,CAAC,UAAU,EAAEK,IAAI,CAAC;QAAA;MAAC,EAC5D,EACF,KAAC,SAAS;QACR,WAAW,EAAC,UAAU;QACtB,KAAK,EAAEX,UAAU,CAACa,QAAS;QAC3B,YAAY,EAAE,sBAACF,IAAI;UAAA,OAAKL,iBAAiB,CAAC,UAAU,EAAEK,IAAI,CAAC;QAAA;MAAC,EAC5D,EACF,KAAC,SAAS;QACR,WAAW,EAAC,eAAY;QACxB,KAAK,EAAEX,UAAU,CAACc,QAAS;QAC3B,YAAY,EAAE,sBAACH,IAAI;UAAA,OAAKL,iBAAiB,CAAC,UAAU,EAAEK,IAAI,CAAC;QAAA,CAAC;QAC5D,eAAe,EAAE,CAACT;MAAa,EAC9B,EAEH,KAAC,MAAM;QAAC,KAAK,EAAC,SAAS;QAAC,OAAO,EAAEG;MAAgB,EAAG;IAAA,EAC/C,GAGP,MAAC,IAAI;MAAA,WACH,MAAC,IAAI;QAAA,WAAC,UAAQ,EAACT,IAAI,CAACc,MAAM;MAAA,EAAQ,EAClC,MAAC,IAAI;QAAA,WAAC,YAAU,EAACd,IAAI,CAACgB,QAAQ;MAAA,EAAQ,EACtC,MAAC,IAAI;QAAA,WAAC,YAAU,EAAChB,IAAI,CAACiB,QAAQ;MAAA,EAAQ,EACtC,MAAC,IAAI;QAAA,WAAC,YAAU,EAACjB,IAAI,CAACkB,QAAQ;MAAA,EAAQ,EACtC,KAAC,gBAAgB;QACf,KAAK,EAAEZ,YAAY,GAAG,oBAAoB,GAAG,oBAAqB;QAClE,OAAO,EAAE;UAAA,OAAMC,eAAe,CAAC,CAACD,YAAY,CAAC;QAAA;MAAC,EAAG,EACjD,KAAC,IAAI;QAAA,UAAC;MAAK,EAAO,EACpB,KAAC,MAAM;QAAC,KAAK,EAAC,QAAQ;QAAC,OAAO,EAAEE;MAAgB,EAAG;IAAA,EAEtD;EAAA,EACI;AAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}